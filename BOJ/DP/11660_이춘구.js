const input = require("fs")
  .readFileSync("/dev/stdin")
  .toString()
  .trim()
  .split("\n");
// input = `4 3
// 1 2 3 4
// 2 3 4 5
// 3 4 5 6
// 4 5 6 7
// 2 2 3 4
// 3 4 3 4
// 1 1 4 4
// `
const [N, M] = input[0].split(" ").map(Number);
// 0으로 채운 이차원 배열을 만드는데, 계산 편의를 위해 상단 행과 좌측 열을 추가한다.
const table = Array.from({ length: N + 1 }, () => new Array(N + 1).fill(0));
// ┌───┬───┬───┬───┬───┐
// │ 0 │ 0 │ 0 │ 0 │ 0 │
// │ 0 │ 0 │ 0 │ 0 │ 0 │
// │ 0 │ 0 │ 0 │ 0 │ 0 │
// │ 0 │ 0 │ 0 │ 0 │ 0 │
// │ 0 │ 0 │ 0 │ 0 │ 0 │
// └───┴───┴───┴───┴───┘
const coords = input.slice(N + 1).map((v) => v.split(" ").map(Number));
// coords = [ [ 2, 2, 3, 4 ], [ 3, 4, 3, 4 ], [ 1, 1, 4, 4 ] ]
const answer = [];

// 0으로 채워진 테이블에 x, y 좌표에 맞는 값을 채운다
input.slice(1, N + 1).forEach((row, x) => {
  row.split(" ").forEach((value, y) => {
    table[x + 1][y + 1] = Number(value);
  });
});
// ┌───┬───┬───┬───┬───┐
// │ 0 │ 0 │ 0 │ 0 │ 0 │
// │ 0 │ 1 │ 2 │ 3 │ 4 │
// │ 0 │ 2 │ 3 │ 4 │ 5 │
// │ 0 │ 3 │ 4 │ 5 │ 6 │
// │ 0 │ 4 │ 5 │ 6 │ 7 │
// └───┴───┴───┴───┴───┘

// (1, 1)부터 해당 좌표까지의 구간합을 구해서 기록한다.
// (1, 1)부터 (3, 4)까지의 구간합 = (3, 4)의 값 + (2, 4)의 구간합 + (3, 3)의 구간합 - (2, 3)의 구간합
// (2, 3)의 구간합을 한 번 빼주는 이유는 앞의 두 구간합을 더하는 과정에서 두 번 더해졌기 때문이다.
for (let x = 1; x <= N; x += 1) {
  for (let y = 1; y <= N; y += 1) {
    table[x][y] += table[x - 1][y] + table[x][y - 1] - table[x - 1][y - 1];
  }
}
// ┌───┬────┬────┬────┬────┐
// │ 0 │ 0  │ 0  │ 0  │ 0  │
// │ 0 │ 1  │ 3  │ 6  │ 10 │
// │ 0 │ 3  │ 8  │ 15 │ 24 │
// │ 0 │ 6  │ 15 │ 27 │ 42 │
// │ 0 │ 10 │ 24 │ 42 │ 64 │
// └───┴────┴────┴────┴────┘

// 구간을 정의하는 좌표를 순회하며 구간합을 구하는데,
// 사각형으로 형성된 구간의 상단 행의 구간합과 좌측 열의 구간합을 빼고
// 두 번 뺀 좌상단의 구간합을 한 번 더한다.
coords.forEach((coord) => {
  const [x1, y1, x2, y2] = coord;
  const sum =
    table[x2][y2] -
    table[x1 - 1][y2] -
    table[x2][y1 - 1] +
    table[x1 - 1][y1 - 1];

  answer.push(sum);
});
// 예) (2, 2)부터 (3,4)의 구간합
//   0   0    0    0    0
//     ┌───────────────────┐
//   0 │ 1  │ 3    6    10 │ <= 빼기
//     │────┌──────────────┐
//   0 │ 3  │ 8    15   24 │
//   0 │ 6  │ 15   27   42 │
//     └────┴──────────────┘
//   0   10   24   42   64
//        ^
//       빼기
// 두 번 뺀 (1, 1)의 값인 1 더하기

console.log(answer.join("\n"));
